    BottomSheetDialog bottomSheetDialog;
  imview.setOnClickListener(v13 -> {
                PermissionListener permissionlistener = new PermissionListener() {
                    @Override
                    public void onPermissionGranted() {
                        bottomSheetDialog = new BottomSheetDialog(BillsActivity.this);

                        View view = getLayoutInflater().inflate(R.layout.button_sheet, null);
                        bottomSheetDialog.setContentView(view);
                        TextView camera1 = view.findViewById(R.id.tv_btn_add_photo_camera);
                        TextView gallery = view.findViewById(R.id.tv_btn_add_photo_gallery);
                        TextView remove = view.findViewById(R.id.tv_btn_remove_photo);
                        camera1.setOnClickListener(v1312 -> {
                            cameraIntent();
                            SELECT_IMAGE11 = 1;
                            SELECT_IMAGE1 = 1;
                            SELECT_IMAGE22 = 1;
                            SELECT_IMAGE2 = 1;
                            bottomSheetDialog.dismiss();
                        });
                        gallery.setOnClickListener(v131 -> {
                            galleryIntent();
                            SELECT_IMAGE22 = 2;
                            SELECT_IMAGE2 = 2;
                            SELECT_IMAGE11 = 2;
                            SELECT_IMAGE1 = 2;
                            bottomSheetDialog.dismiss();
                        });
                        remove.setOnClickListener(v1313 -> {
                            camera1.setVisibility(View.VISIBLE);
                            imview.setImageDrawable(null);
                            bottomSheetDialog.dismiss();
                        });
                        bottomSheetDialog.show();
                        bottomSheetDialog.setOnKeyListener((dialog1, keyCode, event) -> {
                            bottomSheetDialog.closeOptionsMenu();
                            return false;
                        });
                    }

                    @Override
                    public void onPermissionDenied(ArrayList<String> deniedPermissions) {
                        Toast.makeText(getApplicationContext(), R.string.permission_denied + deniedPermissions.toString(), Toast.LENGTH_SHORT).show();
                    }
                };
                TedPermission.with(getApplicationContext())
                        .setPermissionListener(permissionlistener)
                        .setDeniedMessage(R.string.upload_image_denied_msg)
                        .setPermissions(Manifest.permission.INTERNET, Manifest.permission.CAMERA, Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE)
                        .check();
            });
        });
        
        
        
        
          public void cameraIntent() {
        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        startActivityForResult(intent, SELECT_IMAGEA = 1);
    }

    private void galleryIntent() {
        Intent intent = new Intent();
        intent.setType("image/*");
        intent.setAction(Intent.ACTION_GET_CONTENT);//
        startActivityForResult(Intent.createChooser(intent, "Select File"), SELECT_IMAGEB = 2);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == RESULT_OK) {
            File imageZipperFile = null;
            if (requestCode == SELECT_IMAGEA) {
                if (SELECT_IMAGE11 == SELECT_IMAGE1) {
                    camera.setVisibility(View.GONE);
                    Bitmap thumbnail = (Bitmap) data.getExtras().get("data");
                    imview.setImageBitmap(thumbnail);
                    Uri tempUri = getImageUri(getApplicationContext(), thumbnail);
                    File finalFile = new File(getRealPathFromURI(tempUri));
                    picturePath = String.valueOf(finalFile);
                }

            } else if (requestCode == SELECT_IMAGEB) {
                Uri selectedImage = data.getData();
                if (SELECT_IMAGE22 == SELECT_IMAGE2) {
                    File file = FileUtils.getFile(getApplicationContext(), selectedImage);
                    try {
                        imageZipperFile = new ImageZipper(getApplicationContext()).compressToFile(file);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    camera.setVisibility(View.GONE);
                    picturePath = String.valueOf(imageZipperFile);
                    Glide.with(getApplicationContext()).load(picturePath).into(imview);
                }
            }


        }
    }

    public Uri getImageUri(Context inContext, Bitmap inImage) {
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        inImage.compress(Bitmap.CompressFormat.JPEG, 100, bytes);
        String path = MediaStore.Images.Media.insertImage(inContext.getContentResolver(), inImage, "Title", null);
        return Uri.parse(path);
    }

    public String getRealPathFromURI(Uri uri) {
        String path = "";
        if (getContentResolver() != null) {
            Cursor cursor = getContentResolver().query(uri, null, null, null, null);
            if (cursor != null) {
                cursor.moveToFirst();
                int idx = cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATA);
                path = cursor.getString(idx);
                cursor.close();
            }
        }
        return path;
    }
