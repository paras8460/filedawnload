                    new DownloadFileFromURL().execute(item.getFormPath());
  /*
     * crearte folder in storage
     * */
    private void createFolder() {
        String myfolder = Environment.getExternalStorageDirectory() + "/HealthMap";
        File f = new File(myfolder);
        if (!f.exists()) {
            f.mkdir();
        }
    }
     @SuppressLint("StaticFieldLeak")
    class DownloadFileFromURL extends AsyncTask<String, String, String> {
        String FileName;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            pDialog = new ProgressDialog(context);
            pDialog.setMessage(context.getString(R.string.pDialog));
            pDialog.setIndeterminate(false);
            pDialog.setMax(100);
            pDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
            pDialog.setCancelable(true);
            Const.showpDialog(pDialog);
        }

        /**
         * Updating progress bar
         */
        protected void onProgressUpdate(String... progress) {
            // setting progress percentage
            pDialog.setProgress(Integer.parseInt(progress[0]));
        }


        /**
         * Downloading file in background thread
         */
        @Override
        protected String doInBackground(String... f_url) {
            int count;

            try {
                URL url = new URL(Const.IMAGE_URL + f_url[0].trim());
                URLConnection conection = url.openConnection();
                conection.connect();
                // this will be useful so that you can show a tipical 0-100% progress bar
                int lenghtOfFile = conection.getContentLength();

                // download the file
                InputStream input = new BufferedInputStream(url.openStream());
                // Output stream
                FileName = f_url[0].substring(f_url[0].lastIndexOf("/") + 1);
                createFolder();
                String filePath = Environment.getExternalStorageDirectory().getAbsolutePath() + "/HealthMap/" + FileName;
                File file = new File(filePath);
                // File file = new File(context.getFilesDir(), FileName);
                //
                // File file = new File(Environment.getExternalStorageDirectory().getAbsolutePath()+"/Download/"
                //  + FileName);
                OutputStream output = new FileOutputStream(file);
                // OutputStream output = new FileOutputStream(Environment.getDataDirectory()+"/HealthMap/");

                byte data[] = new byte[1024];

                long total = 0;

                while ((count = input.read(data)) != -1) {
                    total += count;
                    // publishing the progress....
                    // After this onProgressUpdate will be called
                    publishProgress("" + (int) ((total * 100) / lenghtOfFile));

                    // writing data to file
                    output.write(data, 0, count);
                }

                // flushing output
                output.flush();

                // closing streams
                output.close();
                input.close();
                return "Success";

            } catch (Exception e) {
                Log.e("Error: ", e.getMessage());
                return e.toString();
            }

        }

        /**
         * After completing background task
         * Dismiss the progress dialog
         **/
        @Override
        protected void onPostExecute(String file_url) {
            // dismiss the dialog after the file was downloaded
            Const.hidepDialog(pDialog);

            ////Reading Data From SD Card.

            if (file_url.equalsIgnoreCase("Success")) {

                String filePath = Environment.getExternalStorageDirectory().getAbsolutePath() + "/HealthMap/" + FileName;
                File file = new File(filePath);
                String type = Const.getFileExtension(file);

                if (type.contains("pdf") || type.contains("docx") || type.contains("doc")) {
                    showPdf(FileName);
                } else if (type.contains("png") || type.contains("jpg") || type.contains("jpeg")) {
                    showImage(FileName);
                } else {
                    openFile(FileName);
                }
            } else {
                Toast.makeText(context, file_url, Toast.LENGTH_LONG).show();
            }
        }

        /*
         * open file in storage
         * */
        private void openFile(String fileName) {
            Intent i = new Intent();
            Uri photoURI = FileProvider.getUriForFile(context, context.getApplicationContext().getPackageName() + ".my.package.name.provider", new File(Environment.getExternalStorageDirectory().getPath() + "/HealthMap/" + fileName));

            i.setAction(android.content.Intent.ACTION_VIEW);
            i.setDataAndType(photoURI, "*/*");
            i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            context.startActivity(i);

        }

        private void showPdf(String fileName) {
            try {
                Intent i = new Intent();
                Uri photoURI = FileProvider.getUriForFile(context, context.getApplicationContext().getPackageName() + ".my.package.name.provider", new File(Environment.getExternalStorageDirectory().getPath() + "/HealthMap/" + fileName));
                i.setAction(android.content.Intent.ACTION_VIEW);
                i.setDataAndType(photoURI, "application/*");
                i.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
                context.startActivity(i);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        private void showImage(String fileName) {

            Uri u = Uri.fromFile(new File(Environment.getExternalStorageDirectory().getPath() + "/HealthMap/" + fileName));
//        i.setDataAndType(Uri.parse(Environment.getExternalStorageDirectory().getAbsolutePath() + "/MyCertStore/" + fileName), "image/*");
            Intent i = new Intent();

//        Uri photoURI = Uri.fromFile(new File(Environment.getExternalStorageDirectory().getPath() + "/MyCertStore/" + fileName));
            Uri photoURI = FileProvider.getUriForFile(context, context.getApplicationContext().getPackageName() + ".my.package.name.provider", new File(Environment.getExternalStorageDirectory().getPath() + "/HealthMap/" + fileName));
            i.setAction(android.content.Intent.ACTION_VIEW);
            i.setDataAndType(photoURI, "image/*");
            i.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
            context.startActivity(i);
        }
    }
